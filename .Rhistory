add_three -> function(num) {
return (num + 3)
}
print(add_three(4))
add_three <- function(num) {
return (num + 3)
}
print(add_three(4))
add_three <- function(num) {
return (num + 3)
}
print(add_three(4))
ten = add_three(7)
imperial_to_metric <- function(feet, inches) {
return ((feet * 12 + inches) * 0.0254)
}
height_in_meters = imperial_to_metric(5, 8)
print(ten)
print(height_in_meters)
add_three <- function(num) {
return (num + 3)
}
ten <- add_three(7)
imperial_to_metric <- function(feet, inches) {
return ((feet * 12 + inches) * 0.0254)
}
height_in_meters <- imperial_to_metric(5, 8)
print(ten)
print(height_in_meters)
print("abc" + 9)
print("abc" + "ad")
print("abc", "ad")
paste("abc", 9)
# filename: example1.R
# Task: Given a temperature in Celcius, compute the temperature in Fahrenheit
# A numeric variable holding temperature in Celcius
temp_in_C <- 20
# Using standard formula, compute temperature in Fahrenheit
temp_in_F <- temp_in_C * 9/5 + 32
# Print the result
print(temp_in_F)
source('C:/Users/risha/Desktop/INFO201/R-lecture-01/R/example1.R')
source('C:/Users/risha/Desktop/INFO201/R-lecture-01/R/example1.R')
source('C:/Users/risha/Desktop/INFO201/R-lecture-01/R/example1.R')
first_score <- 90
install.packages("nycflights13") # once per machine
library("nycflights13")
View(flights)
View(airlines)
View(airports)
library("dplyr")
most_delayed_airport <- flights %>%
group_by(dest) %>%
filter(arr_delay > 0) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(avg_delay = max(avg_delay, na.rm = TRUE)) %>%
select(dest, avg_delay) %>%
left_join(airports, by = c("dest" = "faa")) %>%
select(dest, name, avg_delay)
most_delayed_airport <- flights %>%
group_by(dest) %>%
filter(arr_delay > 0) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE)) %>%
select(dest, avg_delay) %>%
left_join(airports, by = c("dest" = "faa")) %>%
select(dest, name, avg_delay)
print(most_delayed_airport)
# load packages
library("httr")
library("jsonlite")
library("dplyr")
library("ggmap")
# get api key
source("propublica_key.R")
# returns information about all representatives of a particular state
state_representative <- function(chamber, state) {
resource_uri <- paste0("https://api.propublica.org/congress/v1/members/",
chamber, "/", state, "/current.json")
response <- GET(resource_uri, add_headers("X-API-Key" = propublica_key))
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
return(response_data)
}
View(state_representative("house", "WA"))
setwd("C:/Users/risha/Desktop/INFO201/a7--rgoyal17")
# load packages
library("httr")
library("jsonlite")
library("dplyr")
library("ggmap")
# get api key
source("propublica_key.R")
# returns information about all representatives of a particular state
state_representative <- function(chamber, state) {
resource_uri <- paste0("https://api.propublica.org/congress/v1/members/",
chamber, "/", state, "/current.json")
response <- GET(resource_uri, add_headers("X-API-Key" = propublica_key))
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
return(response_data)
}
View(state_representative("house", "WA"))
print(state_representative("house", "WA"))
# returns information about all representatives of a particular state
state_representative <- function(chamber, state) {
resource_uri <- paste0("https://api.propublica.org/congress/v1/members/",
chamber, "/", state, "/current.json")
response <- GET(resource_uri, add_headers("X-API-Key" = propublica_key))
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
return(response_data$results)
}
View(state_representative("house", "WA"))
lintr:::addin_lint()
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel("Access to Congressional Member Information"),
# Create tabs to navigate different sections of our project
tabsetPanel(
type = "tabs", id = "nav_bar",
# About Page Panel
tabPanel(
"About Page",
h3("Overview"),
p("This is a Shiny Application which aims to show some information about
Congressional State Representatives from all 50 states of the US. The
information is gathered by writing queries to the",
a("ProPublica Congress API.",
href = "https://projects.propublica.org/api-docs/congress-api/")),
p("The app is divided into three tabs. This is the About Page tab which
briefly summarizes this application. The second tab is the State
Representatives tab where you can select a state and find information
about the representatives of that state in a tabular format. The third
tab is the Summary Information tab which shows some summary
information, thorugh a horizontal bar graph, of all representatives of
the state you select."),
h3("Affiliation"),
"Rishabh Goyal",
br(),
"INFO-201A: Technical Foundations of Informatics",
br(),
"The Information School",
br(),
"University of Washington",
br(),
"Autumn 2019",
h3("Reflective Statement"),
p("I really enjoyed this assignment as it helped me learn more about
developing shiny apps and writing queries to an API to get information.
The data extracted contains a lot of information about the state
representatives. Using this data, conclusions can be made about them,
but as O'Neil explains in her book, it is not fair to categorize or
judge humans based on some variables in the dataset.
I found writing code for enabling users to get additional details
about a state reresentative by selecting a particular representative
in the second tab to be challenging. I overcame this challenge by
adding an option to select a representative in the side panel and then
showing details about that representative in the main panel below the
information table. I had to make the choices of the representative
reactive because as the state changed, the representatives changed
too. I did this by updating the selectInput element in the server
function.")
shiny::runApp()
setwd("C:/Users/risha/Desktop/INFO201/a7--rgoyal17")
shiny::runApp()
install.packages(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
shiny::runApp()
runApp()
runApp()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
shiny::runApp('C:/Users/risha/Desktop/INFO201/INFO-201-Group-Project')
install.packages("shinythemes")
runApp('C:/Users/risha/Desktop/INFO201/INFO-201-Group-Project')
library("dplyr")
library("stringr")
# load in filtered data set
emissions_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/emissions_data.csv"))
fuel_economy_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/vehicles_individual_data.csv"))
# convert values to upper case
fuel_economy_data$make <- str_to_upper(
fuel_economy_data$make)
fuel_economy_data$model <- str_to_upper(
fuel_economy_data$model)
emissions_data$Represented.Test.Vehicle.Model <- str_to_upper(
emissions_data$Represented.Test.Vehicle.Model)
# rename a few columns
emissions_data <- rename(emissions_data, 'Vehicle Manufacturer' = Represented.Test.Vehicle.Make)
fuel_economy_data <- rename(fuel_economy_data, 'Vehicle Manufacturer' = make)
emissions_data <- rename(emissions_data, 'Vehicle Model' = Represented.Test.Vehicle.Model)
fuel_economy_data <- rename(fuel_economy_data, 'Vehicle Model' = model)
brands1 <- emissions_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(average_emission_emitted = sum(Emission_Emitted)/n())
brands2 <- fuel_economy_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(`Average city MPG` = sum(Average.city.MPG) / n(),
`Average highway MPG` = sum(Average.highway.MPG) / n(),
`Combined MPG` = sum(Combined.MPG) / n(),
`Annual gas Consumption in Barrels` = sum(Annual.gas.Consumption.in.Barrels) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.Emissions.in.g.mi) / n(),
`Annual Fuel Cost` = sum(Annual.Fuel.Cost) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.Savings.for.Gas.over.5.Years) / n())
all_brands <- merge(x=brands1,y=brands2,by="Vehicle Manufacturer")
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
# View(emissions_data)
# View(fuel_economy_data)
# View(brands1)
# View(brands2)
# View(all_brands)
# View(all_cars)
# write.csv(all_brands, "data/filtered_datasets/combined_car_brands.csv",
#           row.names = FALSE)
# write.csv(all_cars, "data/filtered_datasets/combined_car_models.csv",
#           row.names = FALSE)
library("dplyr")
library("stringr")
# load in filtered data set
emissions_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/emissions_data.csv"))
setwd("C:/Users/risha/Desktop/INFO201/INFO-201-Group-Project")
library("dplyr")
library("stringr")
# load in filtered data set
emissions_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/emissions_data.csv"))
fuel_economy_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/vehicles_individual_data.csv"))
# convert values to upper case
fuel_economy_data$make <- str_to_upper(
fuel_economy_data$make)
fuel_economy_data$model <- str_to_upper(
fuel_economy_data$model)
emissions_data$Represented.Test.Vehicle.Model <- str_to_upper(
emissions_data$Represented.Test.Vehicle.Model)
# rename a few columns
emissions_data <- rename(emissions_data, 'Vehicle Manufacturer' = Represented.Test.Vehicle.Make)
fuel_economy_data <- rename(fuel_economy_data, 'Vehicle Manufacturer' = make)
emissions_data <- rename(emissions_data, 'Vehicle Model' = Represented.Test.Vehicle.Model)
fuel_economy_data <- rename(fuel_economy_data, 'Vehicle Model' = model)
brands1 <- emissions_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(average_emission_emitted = sum(Emission_Emitted)/n())
brands2 <- fuel_economy_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(`Average city MPG` = sum(Average.city.MPG) / n(),
`Average highway MPG` = sum(Average.highway.MPG) / n(),
`Combined MPG` = sum(Combined.MPG) / n(),
`Annual gas Consumption in Barrels` = sum(Annual.gas.Consumption.in.Barrels) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.Emissions.in.g.mi) / n(),
`Annual Fuel Cost` = sum(Annual.Fuel.Cost) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.Savings.for.Gas.over.5.Years) / n())
all_brands <- merge(x=brands1,y=brands2,by="Vehicle Manufacturer")
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
# View(emissions_data)
# View(fuel_economy_data)
# View(brands1)
# View(brands2)
# View(all_brands)
# View(all_cars)
# write.csv(all_brands, "data/filtered_datasets/combined_car_brands.csv",
#           row.names = FALSE)
# write.csv(all_cars, "data/filtered_datasets/combined_car_models.csv",
#           row.names = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
