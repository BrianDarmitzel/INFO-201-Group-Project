}
plot_mpg(highway_mpg)
# Create a function to graph City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
plot_ly(
type = "bar",
x = dataset[[column[2]]],
y = reorder(dataset[[column[1]]], dataset[[column[2]]]),
marker = list(color = 'deepskyblue',
line = list(color = 'black', width = 1))) %>%
layout(title = paste("Average", word(column[2], 2), "MPG of Different Manufacturers"),
xaxis = list(title = paste("Miles Per Gallon driving", word(column[2], 2))),
yaxis = list(title = "Car Manufacturer"))
}
plot_mpg(highway_mpg)
plot_mpg(city_mpg)
# Create a function to graph City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
plot_ly(
type = "bar",
x = dataset[[column[2]]],
y = reorder(dataset[[column[1]]], dataset[[column[2]]]),
text = "weatr",
marker = list(color = 'deepskyblue',
line = list(color = 'black', width = 1))) %>%
layout(title = paste("Average", word(column[2], 2), "MPG of Different Manufacturers"),
xaxis = list(title = paste("Miles Per Gallon driving", word(column[2], 2))),
yaxis = list(title = "Car Manufacturer"))
}
plot_mpg(highway_mpg)
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make,`Average city MPG`) %>%
round(city_mpg$`Average city MPG`) %>%
top_n(10)
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make,`Average city MPG`) %>%
round(`Average city MPG`) %>%
top_n(10)
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make,`Average city MPG`) %>%
round(city_mpg$`Average city MPG`) %>%
top_n(10)
round(city_mpg$`Average city MPG`)
city_mpg <- round(city_mpg$`Average city MPG`, 1)
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make,`Average city MPG`) %>%
top_n(10)
>>>>>>> 412edb7d7d93bd5127f345c4a7e4fe3ed4bb4227
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make,`Average city MPG`) %>%
top_n(10)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make,`Average highway MPG`) %>%
top_n(10)
# Create a function to graph City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
ggplot(data = dataset, aes(x = reorder(dataset[[column[1]]], dataset[[column[2]]]), y = dataset[[column[2]]])) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = round(dataset[[column[2]]], 1), hjust = -0.2)) +
labs(title = paste("Average", word(column[2], 2),"MPG of Different Car Manufacturers"),
x = "Car Manufacturer", y = paste("Miles Per Gallon on", word(column[2], 2))) +
coord_flip() +
theme_minimal()
}
plot_mpg(highway_mpg)
plot_mpg(city_mpg)
library('dplyr')
library('stringr')
library("ggplot2")
test_df <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/test_filtered_2009_present.csv"))
test_df$Represented.Test.Vehicle.Make <- str_to_upper(test_df$Represented.Test.Vehicle.Make)
filter_test_df <- test_df %>%
select(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model, Emission.Name, Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(Rounded.Emission.Result..g.mi., na.rm = TRUE))
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
# filter(num > 20) %>%
arrange(-avg_emission)
# head(10)
select_list <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
arrange(-avg_emission) %>%
pull(Represented.Test.Vehicle.Make)
ggplot(data = summary_info) +
geom_col(mapping = aes(x = reorder(Represented.Test.Vehicle.Make, avg_emission), y = avg_emission)) +
coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library('dplyr')
library('stringr')
library("ggplot2")
test_df <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/test_filtered_2009_present.csv"))
test_df$Represented.Test.Vehicle.Make <- str_to_upper(test_df$Represented.Test.Vehicle.Make)
filter_test_df <- test_df %>%
select(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model, Emission.Name, Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(Rounded.Emission.Result..g.mi., na.rm = TRUE))
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
filter(num > 20) %>%
arrange(-avg_emission)
head(10)
select_list <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
arrange(-avg_emission) %>%
pull(Represented.Test.Vehicle.Make)
ggplot(data = summary_info) +
geom_col(mapping = aes(x = reorder(Represented.Test.Vehicle.Make, avg_emission), y = avg_emission)) +
coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library('dplyr')
library('stringr')
library("ggplot2")
test_df <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/test_filtered_2009_present.csv"))
test_df$Represented.Test.Vehicle.Make <- str_to_upper(test_df$Represented.Test.Vehicle.Make)
filter_test_df <- test_df %>%
select(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model, Emission.Name, Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(Rounded.Emission.Result..g.mi., na.rm = TRUE))
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
filter(num > 20) %>%
arrange(-avg_emission)%>%
head(10)
select_list <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
arrange(-avg_emission) %>%
pull(Represented.Test.Vehicle.Make)
ggplot(data = summary_info) +
geom_col(mapping = aes(x = reorder(Represented.Test.Vehicle.Make, avg_emission), y = avg_emission)) +
coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library("dplyr")
library("ggplot2")
library("stringr")
# filtered data set
vehicles_data <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/vehicles_filtered.csv"))
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n())
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make,`Average city MPG`) %>%
top_n(10)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make,`Average highway MPG`) %>%
top_n(10)
# Create a function to graph City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
ggplot(data = dataset, aes(x = reorder(dataset[[column[1]]], dataset[[column[2]]]), y = dataset[[column[2]]])) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = round(dataset[[column[2]]], 1), hjust = -0.2)) +
labs(title = paste("Average", word(column[2], 2),"MPG of Different Car Manufacturers"),
x = "Car Manufacturer", y = paste("Miles Per Gallon on", word(column[2], 2))) +
coord_flip() +
theme_minimal()
}
plot_mpg(highway_mpg)
plot_mpg(city_mpg)
library("dplyr")
library("ggplot2")
library("stringr")
library("lintr")
library("plotly")
# filtered data set
vehicles_data <- read.csv(
unz("data/filtered_datasets.zip",
"filtered_datasets/vehicles_filtered.csv"), stringsAsFactors = F)
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n())
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make, `Average city MPG`) %>%
top_n(10)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make, `Average highway MPG`) %>%
top_n(10)
# Create a function to create interactive
# graph of City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
plot_ly(
type = "bar",
x = round(dataset[[column[2]]], 1),
y = reorder(dataset[[column[1]]], dataset[[column[2]]]),
marker = list(color = "deepskyblue",
line = list(color = "black", width = 1))) %>%
layout(title = paste("Average", word(column[2], 2),
"MPG of Different Manufacturers"),
xaxis = list(title = paste("Miles Per Gallon driving",
word(column[2], 2))),
yaxis = list(title = "Car Manufacturer"))
}
<<<<<<< HEAD
library("dplyr")
library("stringr")
library("ggplot2")
library("lintr")
# load in filtered data set
test_df <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/test_filtered_2009_present.csv"))
# format column
test_df$Represented.Test.Vehicle.Make <- str_to_upper(
test_df$Represented.Test.Vehicle.Make)
# filter the dataset further
filter_test_df <- test_df %>%
select(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model,
Emission.Name,
Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(
Rounded.Emission.Result..g.mi., na.rm = TRUE))
# create a summary dataframe from the filtered dataset
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(),
total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE),
avg_emission = total_emissions_emitted / num)
# get the list of all car manufacturers
select_list <- summary_info %>%
pull(Represented.Test.Vehicle.Make)
# create a dataframe for the graph
graph_df <- summary_info %>%
arrange(-avg_emission) %>%
head(10)
# create the graph
emissions <- ggplot(data = graph_df) +
geom_col(mapping = aes(
x = reorder(Represented.Test.Vehicle.Make, avg_emission),
y = avg_emission)) + coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library("dplyr")
library("stringr")
library("ggplot2")
library("lintr")
# load in filtered data set
test_df <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/test_filtered_2009_present.csv"))
# format column
test_df$Represented.Test.Vehicle.Make <- str_to_upper(
test_df$Represented.Test.Vehicle.Make)
# filter the dataset further
filter_test_df <- test_df %>%
select(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model,
Emission.Name,
Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(
Rounded.Emission.Result..g.mi., na.rm = TRUE))
# create a summary dataframe from the filtered dataset
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(),
total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE),
avg_emission = total_emissions_emitted / num)
# get the list of all car manufacturers
select_list <- summary_info %>%
pull(Represented.Test.Vehicle.Make)
# create a dataframe for the graph
graph_df <- summary_info %>%
arrange(-avg_emission) %>%
head(10)
# create the graph
emissions <- ggplot(data = graph_df) +
geom_col(mapping = aes(
x = reorder(Represented.Test.Vehicle.Make, avg_emission),
y = avg_emission)) + coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
=======
plot_mpg(highway_mpg)
plot_mpg(city_mpg)
shiny::runApp()
>>>>>>> 412edb7d7d93bd5127f345c4a7e4fe3ed4bb4227
# Load the `dplyr` package
library(dplyr)
# Load your data, making sure to not interpret strings as factors
data <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = FALSE)
# What was the least successful day on which to launch a project? In other
# words, which day had the lowest success rate (lowest proportion of projects
# that were successful)? This might require some creative problem solving....
least_successful_date <- data %>%
mutate(day = weekdays(as.Date(launched))) %>%
group_by(day) %>%
filter(state != "successful") %>%
summarize(num_unsuccessful = n()) %>%
mutate(proportion = num_unsuccessful / nrow(data)) %>%
filter(proportion == max(proportion)) %>%
select(day) %>%
pull()
least_successful_date
# Load the `dplyr` package
library(dplyr)
setwd("C:/Users/risha/Desktop/INFO201/a4-rgoyal17")
# Load the `dplyr` package
library(dplyr)
# Load your data, making sure to not interpret strings as factors
data <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = FALSE)
# What was the least successful day on which to launch a project? In other
# words, which day had the lowest success rate (lowest proportion of projects
# that were successful)? This might require some creative problem solving....
least_successful_date <- data %>%
mutate(day = weekdays(as.Date(launched))) %>%
group_by(day) %>%
filter(state != "successful") %>%
summarize(num_unsuccessful = n()) %>%
mutate(proportion = num_unsuccessful / nrow(data)) %>%
filter(proportion == max(proportion)) %>%
select(day) %>%
pull()
print(least_successful_date)
# What was the least successful day on which to launch a project? In other
# words, which day had the lowest success rate (lowest proportion of projects
# that were successful)? This might require some creative problem solving....
least_successful_date <- data %>%
mutate(day = weekdays(as.Date(launched))) %>%
group_by(day) %>%
filter(state != "successful") %>%
summarize(num_unsuccessful = n()) %>%
mutate(proportion = num_unsuccessful / nrow(data)) %>%
#filter(proportion == max(proportion)) %>%
#select(day) %>%
#pull()
print(least_successful_date)
# create UI
ui <- fluidPage(
# Title of our project
titlePanel("Green Car Research Project"),
# Create tabs to navigate different sections of our project
tabsetPanel(
type = "tabs", id = "nav_bar",
# Introduction to our project and our research questions
tabPanel("Introduction",
h3("Introduction:"),
p("Nearly 50% of Americans live in areas that don't meet federal air
quality standards. Passenger vehicles are one of the major sources
of air pollution, producing significant amounts of harmful pollutants
such as nitrogen oxides and carbon monoxide. These pollutants
contribute towards serious health related problems."),
p("Our project aims to spread awareness about how much pollutants are
produced by vehicles in America by every major vehicle manufacturing
company. We are using large and reliable datasets for our project
which will enable us to analyze and provide this information. We hope
to persuade people to buy more eco-friendly and fuel efficient
vehicles."),
h3("Research Questions:"),
p("- Which car manufacturer makes the most
'eco-friendly' cars, as in which of these
manufacturere does the least harm to the
environment through their cars?"),
p("- Which car manufacturers make the most
fuel-efficient cars, and can run the furthest
on a single gallon of gasoline?"),
),
# Create a tab which holds our interactive visualizations
tabPanel("Visualizations",
h2("Fuel Economy Visualiztion"),
sidebarLayout(
# create UI
my_ui <- fluidPage(
# Title of our project
titlePanel("Green Car Research Project"),
# Create tabs to navigate different sections of our project
tabsetPanel(
type = "tabs", id = "nav_bar",
# Introduction to our project and our research questions
tabPanel("Introduction",
h3("Introduction:"),
p("Nearly 50% of Americans live in areas that don't meet federal air
quality standards. Passenger vehicles are one of the major sources
of air pollution, producing significant amounts of harmful pollutants
such as nitrogen oxides and carbon monoxide. These pollutants
contribute towards serious health related problems."),
p("Our project aims to spread awareness about how much pollutants are
produced by vehicles in America by every major vehicle manufacturing
company. We are using large and reliable datasets for our project
which will enable us to analyze and provide this information. We hope
to persuade people to buy more eco-friendly and fuel efficient
vehicles."),
h3("Research Questions:"),
p("- Which car manufacturer makes the most
'eco-friendly' cars, as in which of these
manufacturere does the least harm to the
environment through their cars?"),
p("- Which car manufacturers make the most
fuel-efficient cars, and can run the furthest
on a single gallon of gasoline?"),
),
# Create a tab which holds our interactive visualizations
tabPanel("Visualizations",
h2("Fuel Economy Visualiztion"),
sidebarLayout(
#library(shiny)
#library(htmltools)
library(ggplot2)
# load in source files to use in creating graphs
source("vehicles_analysis.r")
#library(shiny)
#library(htmltools)
library(ggplot2)
# load in source files to use in creating graphs
source("vehicles_analysis.r")
setwd("C:/Users/risha/Desktop/INFO201/INFO-201-Group-Project")
#library(shiny)
#library(htmltools)
library(ggplot2)
# load in source files to use in creating graphs
source("vehicles_analysis.r")
source("test_results_analysis.R")
# Creates data for our UI
my_server <- function(input, output) {
output$fuel_econ_plot <- renderPlotly({
if (input$analysis_var == "city") {
fuel_econ <- plot_mpg(city_mpg)
} else {
fuel_econ <- plot_mpg(highway_mpg)
}
fuel_econ
})
output$car_info_table <- renderTable({
filtered_table <- summary_info %>%
filter(Represented.Test.Vehicle.Make == input$summary_info)
table <- data.frame(
Variable = c("Average Emission Emitted (g/mi)"),
Value = c(filtered_table$avg_emission))
table
})
output$description <- renderText({
message <- paste0(("Statistics on "), input$summary_info)
message
})
output$emissions_graph <- renderPlot({
the_graph <- emissions
the_graph
})
}
library(shiny)
source("my_ui.R")
source("my_server.R")
# Launch the app
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
