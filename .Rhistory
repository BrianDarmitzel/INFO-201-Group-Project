<<<<<<< HEAD
-lv2, -lv4, -pv2, -pv4, -trans_dscr, -trany,
-sCharger, -tCharger, -c240Dscr, -startStop,
-hpv, -id, -mpgData, -range, -rangeCity, -rangeCityA,
-rangeHwy, -rangeHwyA, -rangeA, -mfrCode, -charge240b,
-c240bDscr, -UHighway, -UHighwayA
) %>%
rename(
"Annual petroleum consumption in barrels for main fuel" = barrels08,
"Annual petroleum consumption in barrels for alternate fuel" = barrelsA08,
"Time to charge electric vehicle at 120 V" = charge120,
"Time to charge electric vehicle at 240 V" = charge240,
"City MGP for main fuel" = city08,
"City MPG for alternate fuel" = cityA08,
"City gas comsumption (gallons/100 miles) in charge depleting mode" = cityCD,
"City electricity consumption in kw-hrs/100 miles" = cityE,
"EPA city utility factor for PHEV" = cityUF,
"Tailpipe CO2 in grams/mile for main fuel" = co2,
"Tailpipe CO2 in grams/mile for alternate fuel" = co2A,
"Tailpipe CO2 in grams/mile for alternate fuel (2)" = co2TailpipeAGpm,
"Tailpipe CO2 in grams/mile for main fuel (2)" = co2TailpipeGpm,
"Combined MPG for main fuel" = comb08,
"Combined MPG for alternate fuel" = combA08,
"Combined electricity consumption in kw-hrs/100 miles" = combE,
"Combined gas usage (gal/100 mi) in charge depleting mode" = combinedCD,
"EPa combined utility factor for PHEV" = combinedUF,
"EPA model type index" = engId,
"Engine description" = eng_dscr,
"Electric Motor" = evMotor,
"EPA Fuel Economy Score" = feScore,
"Annual fuel cost for main fuel" = fuelCost08,
"Annual fuel cost for alt fuel" = fuelCostA08,
"Fuel type with main and alternate" = fuelType,
"For dual vehicles, this will be conventional fuel" = fuelType1,
"Alternate fuel type" = fuelType2,
"EPA GHG score" = ghgScore,
"EPA GHG score on alt fuel" = ghgScoreA,
"Highway MPG for main fuel" = highway08,
"Highway MPG for alt fuel" = highwayA08,
"highway gasoline consumption (gallons/100miles) in charge depleting mode" = highwayCD,
"highway electricity consumption in kw-hrs/100 miles" = highwayE,
"EPA highway utility factor (share of electricity) for PHEV" = highwayUF,
"Vehicle operates on gas / electric blend on low charge" = phevBlended,
"City MPG for main fuel" = UCity,
"City MPG for alt fuel" = UCityA,
"EPA Vehicle size class" = VClass,
"Model year" = year,
"Cost savings for gas over 5 years comapred to average car" = youSaveSpend,
"If G or T, this vehicle is subject to gas guzzler tax" = guzzler,
"Type of alt fuel or advanced tech vehicle" = atvType,
"EPA composite gasoline-electricity city MPGe for plug-in hybrid vehicles" = phevCity,
"EPA composite gasoline-electricity combined city-highway MPGe for plug-in hybrid vehicles" = phevComb
)
vehicle_cars <- vehicles_filtered %>%
group_by(model) %>%
summarise(num = n())
vehicle_years <- vehicles_filtered %>%
group_by(`Model year`) %>%
summarise(num = n())
library("dplyr")
library("ggplot2")
library("stringr")
# filtered data set
vehicles_data <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/vehicles_filtered.csv"))
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n())
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make,`Average city MPG`) %>%
top_n(10)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make,`Average highway MPG`) %>%
top_n(10)
# Create a function to graph City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
ggplot(data = dataset, aes(x = reorder(dataset[[column[1]]], dataset[[column[2]]]), y = dataset[[column[2]]])) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = round(dataset[[column[2]]], 1), hjust = -0.2)) +
labs(title = paste("Average", word(column[2], 2),"MPG of Different Car Manufacturers"),
x = "Car Manufacturer", y = paste("Miles Per Gallon on", word(column[2], 2))) +
coord_flip() +
theme_minimal()
}
plot_mpg(highway_mpg)
plot_mpg(city_mpg)
library('dplyr')
library('stringr')
library("ggplot2")
test_df <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/test_filtered_2009_present.csv"))
test_df$Represented.Test.Vehicle.Make <- str_to_upper(test_df$Represented.Test.Vehicle.Make)
filter_test_df <- test_df %>%
select(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model, Emission.Name, Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(Rounded.Emission.Result..g.mi., na.rm = TRUE))
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
# filter(num > 20) %>%
arrange(-avg_emission)
# head(10)
select_list <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
arrange(-avg_emission) %>%
pull(Represented.Test.Vehicle.Make)
ggplot(data = summary_info) +
geom_col(mapping = aes(x = reorder(Represented.Test.Vehicle.Make, avg_emission), y = avg_emission)) +
coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library('dplyr')
library('stringr')
library("ggplot2")
test_df <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/test_filtered_2009_present.csv"))
test_df$Represented.Test.Vehicle.Make <- str_to_upper(test_df$Represented.Test.Vehicle.Make)
filter_test_df <- test_df %>%
select(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model, Emission.Name, Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(Rounded.Emission.Result..g.mi., na.rm = TRUE))
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
filter(num > 20) %>%
arrange(-avg_emission)
head(10)
select_list <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
arrange(-avg_emission) %>%
pull(Represented.Test.Vehicle.Make)
ggplot(data = summary_info) +
geom_col(mapping = aes(x = reorder(Represented.Test.Vehicle.Make, avg_emission), y = avg_emission)) +
coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library('dplyr')
library('stringr')
library("ggplot2")
test_df <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/test_filtered_2009_present.csv"))
test_df$Represented.Test.Vehicle.Make <- str_to_upper(test_df$Represented.Test.Vehicle.Make)
filter_test_df <- test_df %>%
select(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model, Emission.Name, Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(Rounded.Emission.Result..g.mi., na.rm = TRUE))
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
filter(num > 20) %>%
arrange(-avg_emission)%>%
head(10)
select_list <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
arrange(-avg_emission) %>%
pull(Represented.Test.Vehicle.Make)
ggplot(data = summary_info) +
geom_col(mapping = aes(x = reorder(Represented.Test.Vehicle.Make, avg_emission), y = avg_emission)) +
coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library("dplyr")
library("ggplot2")
library("stringr")
# filtered data set
vehicles_data <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/vehicles_filtered.csv"))
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n())
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make,`Average city MPG`) %>%
top_n(10)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make,`Average highway MPG`) %>%
top_n(10)
# Create a function to graph City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
ggplot(data = dataset, aes(x = reorder(dataset[[column[1]]], dataset[[column[2]]]), y = dataset[[column[2]]])) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = round(dataset[[column[2]]], 1), hjust = -0.2)) +
labs(title = paste("Average", word(column[2], 2),"MPG of Different Car Manufacturers"),
x = "Car Manufacturer", y = paste("Miles Per Gallon on", word(column[2], 2))) +
coord_flip() +
theme_minimal()
}
plot_mpg(highway_mpg)
plot_mpg(city_mpg)
library("dplyr")
library("ggplot2")
library("stringr")
library("lintr")
library("plotly")
# filtered data set
vehicles_data <- read.csv(
unz("data/filtered_datasets.zip",
"filtered_datasets/vehicles_filtered.csv"), stringsAsFactors = F)
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n())
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make, `Average city MPG`) %>%
top_n(10)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make, `Average highway MPG`) %>%
top_n(10)
# Create a function to create interactive
# graph of City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
plot_ly(
type = "bar",
x = round(dataset[[column[2]]], 1),
y = reorder(dataset[[column[1]]], dataset[[column[2]]]),
marker = list(color = "deepskyblue",
line = list(color = "black", width = 1))) %>%
layout(title = paste("Average", word(column[2], 2),
"MPG of Different Manufacturers"),
xaxis = list(title = paste("Miles Per Gallon driving",
word(column[2], 2))),
yaxis = list(title = "Car Manufacturer"))
}
library("dplyr")
library("stringr")
library("ggplot2")
library("lintr")
# load in filtered data set
test_df <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/test_filtered_2009_present.csv"))
# format column
test_df$Represented.Test.Vehicle.Make <- str_to_upper(
test_df$Represented.Test.Vehicle.Make)
# filter the dataset further
filter_test_df <- test_df %>%
select(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model,
Emission.Name,
Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(
Rounded.Emission.Result..g.mi., na.rm = TRUE))
# create a summary dataframe from the filtered dataset
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(),
total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE),
avg_emission = total_emissions_emitted / num)
# get the list of all car manufacturers
select_list <- summary_info %>%
pull(Represented.Test.Vehicle.Make)
# create a dataframe for the graph
graph_df <- summary_info %>%
arrange(-avg_emission) %>%
head(10)
# create the graph
emissions <- ggplot(data = graph_df) +
geom_col(mapping = aes(
x = reorder(Represented.Test.Vehicle.Make, avg_emission),
y = avg_emission)) + coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library("dplyr")
library("stringr")
library("ggplot2")
library("lintr")
# load in filtered data set
test_df <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/test_filtered_2009_present.csv"))
# format column
test_df$Represented.Test.Vehicle.Make <- str_to_upper(
test_df$Represented.Test.Vehicle.Make)
# filter the dataset further
filter_test_df <- test_df %>%
select(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model,
Emission.Name,
Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(
Rounded.Emission.Result..g.mi., na.rm = TRUE))
# create a summary dataframe from the filtered dataset
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(),
total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE),
avg_emission = total_emissions_emitted / num)
# get the list of all car manufacturers
select_list <- summary_info %>%
pull(Represented.Test.Vehicle.Make)
# create a dataframe for the graph
graph_df <- summary_info %>%
arrange(-avg_emission) %>%
head(10)
# create the graph
emissions <- ggplot(data = graph_df) +
geom_col(mapping = aes(
x = reorder(Represented.Test.Vehicle.Make, avg_emission),
y = avg_emission)) + coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library("dplyr")
library("stringr")
library("ggplot2")
library("lintr")
# load in filtered data set
test_df <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/test_filtered_2009_present.csv"))
# format column
test_df$Represented.Test.Vehicle.Make <- str_to_upper(
test_df$Represented.Test.Vehicle.Make)
# filter the dataset further
filter_test_df <- test_df %>%
select(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model,
Emission.Name,
Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(
Rounded.Emission.Result..g.mi., na.rm = TRUE))
# create a summary dataframe from the filtered dataset
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(),
total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE),
avg_emission = total_emissions_emitted / num)
# get the list of all car manufacturers
select_list <- summary_info %>%
pull(Represented.Test.Vehicle.Make)
# create a dataframe for the graph
graph_df <- summary_info %>%
arrange(-avg_emission) %>%
head(10)
# create the graph
emissions <- ggplot(data = graph_df) +
geom_col(mapping = aes(
x = reorder(Represented.Test.Vehicle.Make, avg_emission),
y = avg_emission)) + coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
emissions
library("shiny")
library("dplyr")
library("tidyr")
library("ggplot2")
# Manipulating the 'midwest' data set for the pie chart
custom_midwest <- midwest %>%
mutate(
state = replace(state, state == "IL", "Illinois"),
state = replace(state, state == "IN", "Indiana"),
state = replace(state, state == "MI", "Michigan"),
state = replace(state, state == "OH", "Ohio"),
state = replace(state, state == "WI", "Wisconsin")
) %>%
group_by(state) %>%
summarise(
popwhite = sum(popwhite),
popblack = sum(popblack),
popamerindian = sum(popamerindian),
popasian = sum(popasian),
popother = sum(popother)
) %>%
mutate(
total = popwhite + popblack + popamerindian + popasian + popother,
popwhite = popwhite * 100 / total,
popblack = popblack * 100 / total,
popamerindian = popamerindian * 100 / total,
popasian = popasian * 100 / total,
popother = popother * 100 / total
) %>%
select(state, popwhite, popblack, popamerindian, popasian, popother)
n <- custom_midwest$state
custom_df <- as.data.frame(t(custom_midwest[, -1]))
colnames(custom_df) <- n
custom_df$category <- factor(row.names(custom_df))
# Adding the different colors schemes for the pie chart
custom_df <- custom_df %>%
mutate(
Modern = c("#55DDE0", "#33658A", "#2F4858", "#F6AE2D", "#F26419"),
Blue = c("#0B132B", "#1C2541", "#3A506B", "#457B9D", "#1D3557"),
Green = c("#53DD6C", "#388659", "#2BC016", "#3BB273", "#8BBD8B"),
Grey = c("#172121", "#444554", "#E5D0CC", "#BFACB5", "#7F7B82")
)
# Manipulating the 'midwest' dataset for the scatter plot
custom_midwest_two <- midwest %>%
mutate(
state = replace(state, state == "IL", "Illinois"),
state = replace(state, state == "IN", "Indiana"),
state = replace(state, state == "MI", "Michigan"),
state = replace(state, state == "OH", "Ohio"),
state = replace(state, state == "WI", "Wisconsin")
) %>%
select(
state, area, percollege, percprof, percpovertyknown,
percbelowpoverty, percchildbelowpovert, percadultpoverty,
percelderlypoverty
) %>%
rename(
State = state,
Area = area
)
# Creating a custom data frame for displaying labels that are easier to
# understand for the user
df_labels <- data.frame(
percpovertyknown = "Percent Poverty Known",
percbelowpoverty = "Percent Below Poverty",
percchildbelowpovert = "Percent Child Below Poverty",
percadultpoverty = "Percent Adult Poverty",
percelderlypoverty = "Percent Elderly Poverty",
percollege = "Percent College Educated",
percprof = "Percent Profession"
)
# Server function
my_server <- function(input, output) {
output$pie_chart <- renderPlot({
ggplot(custom_df, aes_string(x = 1, y = input$state, fill = "category")) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(
x = NULL, y = NULL, fill = NULL,
title = "Breakup of Demographics in the Midwest"
) +
scale_fill_manual(
values = custom_df[[input$color]],
labels = c(
"White", "Black", "American Indian",
"Asian", "Other"
)
) +
theme_classic() + theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(
hjust = 0.5,
color = "#666666"
)
)
})
output$scatter_plot <- renderPlot({
ggplot(
custom_midwest_two,
aes_string(x = input$x_axis, y = input$y_axis)
) +
geom_smooth(
method = "lm", se = FALSE,
color = "black", formula = y ~ x
) +
geom_point(aes_string(color = input$group_by)) +
labs(
title = "Relationship Between Poverty and Education Levels",
x = df_labels[[input$x_axis]], y = df_labels[[input$y_axis]]
) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, color = "#666666"))
})
}
=======
but as O'Neil explains in her book, it is not fair to categorize or
judge humans based on some variables in the dataset.
I found writing code for enabling users to get additional details
about a state reresentative by selecting a particular representative
in the second tab to be challenging. I overcame this challenge by
adding an option to select a representative in the side panel and then
showing details about that representative in the main panel below the
information table. I had to make the choices of the representative
reactive because as the state changed, the representatives changed
too. I did this by updating the selectInput element in the server
function.")
shiny::runApp()
setwd("C:/Users/risha/Desktop/INFO201/a7--rgoyal17")
shiny::runApp()
install.packages(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
shiny::runApp()
runApp()
runApp()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
shiny::runApp('C:/Users/risha/Desktop/INFO201/INFO-201-Group-Project')
install.packages("shinythemes")
runApp('C:/Users/risha/Desktop/INFO201/INFO-201-Group-Project')
library("dplyr")
library("stringr")
>>>>>>> af5a8c05a2683cea95a781f8249ea9ca687ab9fd
# load in filtered data set
emissions_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/emissions_data.csv"))
fuel_economy_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/vehicles_individual_data.csv"))
<<<<<<< HEAD
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
all_brands <- merge(x=brands1,y=brands2,by="Vehicle Manufacturer")
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
all_brands <- merge(x=brands1,y=brands2,by="Vehicle Manufacturer")
=======
# convert values to upper case
fuel_economy_data$make <- str_to_upper(
fuel_economy_data$make)
fuel_economy_data$model <- str_to_upper(
fuel_economy_data$model)
emissions_data$Represented.Test.Vehicle.Model <- str_to_upper(
emissions_data$Represented.Test.Vehicle.Model)
# rename a few columns
emissions_data <- rename(emissions_data, 'Vehicle Manufacturer' = Represented.Test.Vehicle.Make)
fuel_economy_data <- rename(fuel_economy_data, 'Vehicle Manufacturer' = make)
emissions_data <- rename(emissions_data, 'Vehicle Model' = Represented.Test.Vehicle.Model)
fuel_economy_data <- rename(fuel_economy_data, 'Vehicle Model' = model)
>>>>>>> af5a8c05a2683cea95a781f8249ea9ca687ab9fd
brands1 <- emissions_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(average_emission_emitted = sum(Emission_Emitted)/n())
brands2 <- fuel_economy_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(`Average city MPG` = sum(Average.city.MPG) / n(),
`Average highway MPG` = sum(Average.highway.MPG) / n(),
`Combined MPG` = sum(Combined.MPG) / n(),
`Annual gas Consumption in Barrels` = sum(Annual.gas.Consumption.in.Barrels) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.Emissions.in.g.mi) / n(),
`Annual Fuel Cost` = sum(Annual.Fuel.Cost) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.Savings.for.Gas.over.5.Years) / n())
all_brands <- merge(x=brands1,y=brands2,by="Vehicle Manufacturer")
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
<<<<<<< HEAD
fuel_economy_data
=======
# View(emissions_data)
# View(fuel_economy_data)
# View(brands1)
# View(brands2)
# View(all_brands)
# View(all_cars)
# write.csv(all_brands, "data/filtered_datasets/combined_car_brands.csv",
#           row.names = FALSE)
# write.csv(all_cars, "data/filtered_datasets/combined_car_models.csv",
#           row.names = FALSE)
library("dplyr")
library("stringr")
# load in filtered data set
emissions_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/emissions_data.csv"))
setwd("C:/Users/risha/Desktop/INFO201/INFO-201-Group-Project")
library("dplyr")
library("stringr")
# load in filtered data set
emissions_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/emissions_data.csv"))
fuel_economy_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/vehicles_individual_data.csv"))
>>>>>>> af5a8c05a2683cea95a781f8249ea9ca687ab9fd
# convert values to upper case
fuel_economy_data$make <- str_to_upper(
fuel_economy_data$make)
fuel_economy_data$model <- str_to_upper(
fuel_economy_data$model)
emissions_data$Represented.Test.Vehicle.Model <- str_to_upper(
emissions_data$Represented.Test.Vehicle.Model)
# rename a few columns
emissions_data <- rename(emissions_data, 'Vehicle Manufacturer' = Represented.Test.Vehicle.Make)
fuel_economy_data <- rename(fuel_economy_data, 'Vehicle Manufacturer' = make)
emissions_data <- rename(emissions_data, 'Vehicle Model' = Represented.Test.Vehicle.Model)
fuel_economy_data <- rename(fuel_economy_data, 'Vehicle Model' = model)
brands1 <- emissions_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(average_emission_emitted = sum(Emission_Emitted)/n())
brands2 <- fuel_economy_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(`Average city MPG` = sum(Average.city.MPG) / n(),
`Average highway MPG` = sum(Average.highway.MPG) / n(),
`Combined MPG` = sum(Combined.MPG) / n(),
`Annual gas Consumption in Barrels` = sum(Annual.gas.Consumption.in.Barrels) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.Emissions.in.g.mi) / n(),
`Annual Fuel Cost` = sum(Annual.Fuel.Cost) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.Savings.for.Gas.over.5.Years) / n())
all_brands <- merge(x=brands1,y=brands2,by="Vehicle Manufacturer")
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
<<<<<<< HEAD
mean(all_cars[["Average.city.MPG"]])
averages <- as.vector(lapply(all_cars[3:10], mean), mode = "numeric")
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
columns <- colnames(data)[3:10]
color_map <- c()
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[x] <- c("Data" = "blue")
} else {
color_map[x] <- c("Data" = "red")
}
}
View(color_map)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = num,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = data,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = data,
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, type = "numeric"),
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, "numeric"),
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, "numeric"),
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[as.vector(data, "numeric")]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[columns]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[columns])
)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
text = round(as.vector(data, "numeric"), 1),
textposition = "auto",
marker = list(color = color_map[columns])
)
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
columns <- colnames(data)[3:10]
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
text = round(as.vector(data, "numeric"), 1),
textposition = "auto",
marker = list(color = color_map[columns])
)
View(data)
data <- data[3:10] - averages
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
View(data)
columns <- colnames(data)[3:10]
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
text = round(as.vector(data, "numeric"), 1),
textposition = "auto",
marker = list(color = color_map[columns])
)
plot_ly() %>%
add_bars(
x = columns,
y = data,
marker = list(color = color_map[columns])
)
plot_ly() %>%
add_bars(
x = columns,
y = data,
textposition = "auto",
marker = list(color = color_map[columns])
)
plot_ly() %>%
add_bars(
x = columns,
y = data,
text = round(as.vector(data, "numeric"), 1),
textposition = "auto",
marker = list(color = color_map[columns])
)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
marker = list(color = color_map[columns])
)
View(data)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, mode = "numeric"),
marker = list(color = color_map[columns])
)
View(data)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, mode = "numeric")
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, mode = "numeric"),
marker = list(color = color_map[colnames(data)[3:10]])
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, mode = "numeric"),
marker = list(color = "red")
)
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, mode = "numeric"),
marker = list(color = "red")
)
View(data)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, mode = "numeric"),
marker = list(color = color_map[colnames(data)[3:10]])
)
=======
# View(emissions_data)
# View(fuel_economy_data)
# View(brands1)
# View(brands2)
# View(all_brands)
# View(all_cars)
# write.csv(all_brands, "data/filtered_datasets/combined_car_brands.csv",
#           row.names = FALSE)
# write.csv(all_cars, "data/filtered_datasets/combined_car_models.csv",
#           row.names = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
>>>>>>> af5a8c05a2683cea95a781f8249ea9ca687ab9fd
shiny::runApp()
runApp()
library(plotly)
library(shinythemes)
# create UI
my_ui <- fluidPage(theme = shinytheme("flatly"),
# Create tabs to navigate different sections of our project
navbarPage("Green Car Research Project",
intro_page,
visual_page,
search_page,
closing_page,
about_page
)
)
# Introduction to our project and our research questions
intro_page <- tabPanel("Introduction",
h3("Introduction:"),
p("Nearly 50% of Americans live in areas that don't meet federal air
quality standards. Passenger vehicles are one of the major sources
of air pollution, producing significant amounts of harmful pollutants
such as nitrogen oxides and carbon monoxide. These pollutants
contribute towards serious health related problems."),
p("Our project aims to spread awareness about how much pollutants are
produced by vehicles in America by every major vehicle manufacturing
company. We are using large and reliable datasets for our project
which will enable us to analyze and provide this information. We hope
to persuade people to buy more eco-friendly and fuel efficient
vehicles."),
h3("Research Questions:"),
p("- Which car manufacturer makes the most
'eco-friendly' cars, as in which of these
manufacturere does the least harm to the
environment through their cars?"),
p("- Which car manufacturers make the most
fuel-efficient cars, and can run the furthest
on a single gallon of gasoline?"),
)
# Create a tab which holds our interactive visualizations
visual_page <- tabPanel("Visualizations",
h2("Fuel Economy Visualiztion"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "viz_type",
label = h3("Types of MPG"),
choices = c("city", "highway"),
selected = "city")),
mainPanel(
plotlyOutput(outputId = "fuel_econ_plot"))
),
h2("Carbon Monoxide (CO) Emissions Visualization"),
plotOutput(outputId = "emissions_graph")
)
# Create a tab where users can search by car
# manufacturer and see their average emissions
search_page <- tabPanel("Search",
sidebarLayout(
sidebarPanel(
selectInput("car_brand",
label = h3("Select Car Brand"),
choices = all_cars$`Vehicle Manufacturer`,
selected = "Acura"),
br(), br(), br(), br(), br(), br(), br(), br(), br(), br(), br(),
selectInput("car_model",
label = h3("Select Car Model of the Selected Brand"),
choices = "")
),
mainPanel(
h3(textOutput(outputId = "description_brand")),
tableOutput(outputId = "brand_info_table"),
br(),
h3(textOutput(outputId = "description_model")),
tableOutput(outputId = "car_info_table"),
br()
)
),
plotlyOutput(outputId = "car_ranking")
)
# Create a tab where our conclusion can be seen
closing_page <- tabPanel("Conclusion",
h3("Conclusion"),
p("It is noticed that car brands such as Tesla, CODA Automotive, and
BYD, are the car manufacturers which make the most eco-friendly and
fuel efficient cars. We think this is because these car brands
mostly produce electric and hybrid cars which require some or no
fuel. Technological advancement has now made it possible to produce
more eco friendly cars which consume very less fuel, and more and
more car manufacturers are moving towards manufacturing such
cars."),
p("As seen in the CO emissions plot, Mosler, MV, and Hummer are the
top 3 polluting car manufacturers, while Tesla would be the most
environmentally friendly car brand in the list. By selecting the
data from search part, we found a trend that many car brands are
continually updating. For example, the 2004 BMW emitted 1.6 CO (g/ml)
while the 2010 BMW only emitted 0.36 CO. This number dramatically
decrease within six years, which means that some car manufacturers
did pay attention to the pollution issue and aim to improve the
engines with the latest technology. For the fuel economy plot,
Tesla, CODA Automative, and BYD are the top brands who make the
most fuel efficient cars."),
)
# Create a tab explaining our team / resources
about_page <- tabPanel("About",
h3("About Us"),
"Team #6",
br(),
"Brian Darmitzel, Rishabh Goyal, Xiying Huang, Shray Arora",
br(),
"INFO-201A: Techinical Foudations for Informatics",
br(),
"The Information School",
br(),
"University of Washington",
br(),
"Autumn 2019",
h3("Link to the Technical Report"),
a("Technical Report",
href = "https://github.com/BrianDarmitzel/INFO-201-Group-Project/wiki/INFO-201-GROUP-PROJECT-TECHNICAL-REPORT"),
h3("Github Repository"),
a("Our Github Repository",
href = "https://github.com/BrianDarmitzel/INFO-201-Group-Project")
)
runApp()
# create UI
my_ui <- fluidPage(theme = shinytheme("flatly"),
# Create tabs to navigate different sections of our project
navbarPage("Green Car Research Project",
intro_page,
visual_page,
search_page,
closing_page,
about_page
)
)
runApp()
runApp()
runApp()
# create a dataframe for the graph
graph_df <- all_cars %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(avg_emission = sum(Emission_Emitted) / n())
# create a dataframe for the graph
View(all_cars)
# create a dataframe for the graph
graph_df <- all_cars %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(avg_emission = sum(`Average Emissions Emitted`) / n())
View(graph_df)
runApp()
source("combined_data.R")
source("combine_data.R")
View(all_cars)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyWidgets)
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 553bdaad07479db06fdc32e1bef3d9bdf9221ed9
