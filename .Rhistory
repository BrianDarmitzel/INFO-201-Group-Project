-lv2, -lv4, -pv2, -pv4, -trans_dscr, -trany,
-sCharger, -tCharger, -c240Dscr, -startStop,
-hpv, -id, -mpgData, -range, -rangeCity, -rangeCityA,
-rangeHwy, -rangeHwyA, -rangeA, -mfrCode, -charge240b,
-c240bDscr, -UHighway, -UHighwayA
) %>%
rename(
"Annual petroleum consumption in barrels for main fuel" = barrels08,
"Annual petroleum consumption in barrels for alternate fuel" = barrelsA08,
"Time to charge electric vehicle at 120 V" = charge120,
"Time to charge electric vehicle at 240 V" = charge240,
"City MGP for main fuel" = city08,
"City MPG for alternate fuel" = cityA08,
"City gas comsumption (gallons/100 miles) in charge depleting mode" = cityCD,
"City electricity consumption in kw-hrs/100 miles" = cityE,
"EPA city utility factor for PHEV" = cityUF,
"Tailpipe CO2 in grams/mile for main fuel" = co2,
"Tailpipe CO2 in grams/mile for alternate fuel" = co2A,
"Tailpipe CO2 in grams/mile for alternate fuel (2)" = co2TailpipeAGpm,
"Tailpipe CO2 in grams/mile for main fuel (2)" = co2TailpipeGpm,
"Combined MPG for main fuel" = comb08,
"Combined MPG for alternate fuel" = combA08,
"Combined electricity consumption in kw-hrs/100 miles" = combE,
"Combined gas usage (gal/100 mi) in charge depleting mode" = combinedCD,
"EPa combined utility factor for PHEV" = combinedUF,
"EPA model type index" = engId,
"Engine description" = eng_dscr,
"Electric Motor" = evMotor,
"EPA Fuel Economy Score" = feScore,
"Annual fuel cost for main fuel" = fuelCost08,
"Annual fuel cost for alt fuel" = fuelCostA08,
"Fuel type with main and alternate" = fuelType,
"For dual vehicles, this will be conventional fuel" = fuelType1,
"Alternate fuel type" = fuelType2,
"EPA GHG score" = ghgScore,
"EPA GHG score on alt fuel" = ghgScoreA,
"Highway MPG for main fuel" = highway08,
"Highway MPG for alt fuel" = highwayA08,
"highway gasoline consumption (gallons/100miles) in charge depleting mode" = highwayCD,
"highway electricity consumption in kw-hrs/100 miles" = highwayE,
"EPA highway utility factor (share of electricity) for PHEV" = highwayUF,
"Vehicle operates on gas / electric blend on low charge" = phevBlended,
"City MPG for main fuel" = UCity,
"City MPG for alt fuel" = UCityA,
"EPA Vehicle size class" = VClass,
"Model year" = year,
"Cost savings for gas over 5 years comapred to average car" = youSaveSpend,
"If G or T, this vehicle is subject to gas guzzler tax" = guzzler,
"Type of alt fuel or advanced tech vehicle" = atvType,
"EPA composite gasoline-electricity city MPGe for plug-in hybrid vehicles" = phevCity,
"EPA composite gasoline-electricity combined city-highway MPGe for plug-in hybrid vehicles" = phevComb
)
vehicle_cars <- vehicles_filtered %>%
group_by(model) %>%
summarise(num = n())
vehicle_years <- vehicles_filtered %>%
group_by(`Model year`) %>%
summarise(num = n())
library("dplyr")
library("ggplot2")
library("stringr")
# filtered data set
vehicles_data <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/vehicles_filtered.csv"))
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n())
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make,`Average city MPG`) %>%
top_n(10)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make,`Average highway MPG`) %>%
top_n(10)
# Create a function to graph City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
ggplot(data = dataset, aes(x = reorder(dataset[[column[1]]], dataset[[column[2]]]), y = dataset[[column[2]]])) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = round(dataset[[column[2]]], 1), hjust = -0.2)) +
labs(title = paste("Average", word(column[2], 2),"MPG of Different Car Manufacturers"),
x = "Car Manufacturer", y = paste("Miles Per Gallon on", word(column[2], 2))) +
coord_flip() +
theme_minimal()
}
plot_mpg(highway_mpg)
plot_mpg(city_mpg)
library('dplyr')
library('stringr')
library("ggplot2")
test_df <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/test_filtered_2009_present.csv"))
test_df$Represented.Test.Vehicle.Make <- str_to_upper(test_df$Represented.Test.Vehicle.Make)
filter_test_df <- test_df %>%
select(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model, Emission.Name, Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(Rounded.Emission.Result..g.mi., na.rm = TRUE))
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
# filter(num > 20) %>%
arrange(-avg_emission)
# head(10)
select_list <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
arrange(-avg_emission) %>%
pull(Represented.Test.Vehicle.Make)
ggplot(data = summary_info) +
geom_col(mapping = aes(x = reorder(Represented.Test.Vehicle.Make, avg_emission), y = avg_emission)) +
coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library('dplyr')
library('stringr')
library("ggplot2")
test_df <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/test_filtered_2009_present.csv"))
test_df$Represented.Test.Vehicle.Make <- str_to_upper(test_df$Represented.Test.Vehicle.Make)
filter_test_df <- test_df %>%
select(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model, Emission.Name, Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(Rounded.Emission.Result..g.mi., na.rm = TRUE))
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
filter(num > 20) %>%
arrange(-avg_emission)
head(10)
select_list <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
arrange(-avg_emission) %>%
pull(Represented.Test.Vehicle.Make)
ggplot(data = summary_info) +
geom_col(mapping = aes(x = reorder(Represented.Test.Vehicle.Make, avg_emission), y = avg_emission)) +
coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library('dplyr')
library('stringr')
library("ggplot2")
test_df <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/test_filtered_2009_present.csv"))
test_df$Represented.Test.Vehicle.Make <- str_to_upper(test_df$Represented.Test.Vehicle.Make)
filter_test_df <- test_df %>%
select(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model, Emission.Name, Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year, Represented.Test.Vehicle.Make, Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(Rounded.Emission.Result..g.mi., na.rm = TRUE))
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
filter(num > 20) %>%
arrange(-avg_emission)%>%
head(10)
select_list <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(), total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE), avg_emission = total_emissions_emitted/num) %>%
arrange(-avg_emission) %>%
pull(Represented.Test.Vehicle.Make)
ggplot(data = summary_info) +
geom_col(mapping = aes(x = reorder(Represented.Test.Vehicle.Make, avg_emission), y = avg_emission)) +
coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library("dplyr")
library("ggplot2")
library("stringr")
# filtered data set
vehicles_data <- read.csv(unz("data/filtered_datasets.zip", "filtered_datasets/vehicles_filtered.csv"))
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n())
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make,`Average city MPG`) %>%
top_n(10)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make,`Average highway MPG`) %>%
top_n(10)
# Create a function to graph City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
ggplot(data = dataset, aes(x = reorder(dataset[[column[1]]], dataset[[column[2]]]), y = dataset[[column[2]]])) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = round(dataset[[column[2]]], 1), hjust = -0.2)) +
labs(title = paste("Average", word(column[2], 2),"MPG of Different Car Manufacturers"),
x = "Car Manufacturer", y = paste("Miles Per Gallon on", word(column[2], 2))) +
coord_flip() +
theme_minimal()
}
plot_mpg(highway_mpg)
plot_mpg(city_mpg)
library("dplyr")
library("ggplot2")
library("stringr")
library("lintr")
library("plotly")
# filtered data set
vehicles_data <- read.csv(
unz("data/filtered_datasets.zip",
"filtered_datasets/vehicles_filtered.csv"), stringsAsFactors = F)
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n())
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make, `Average city MPG`) %>%
top_n(10)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make, `Average highway MPG`) %>%
top_n(10)
# Create a function to create interactive
# graph of City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
plot_ly(
type = "bar",
x = round(dataset[[column[2]]], 1),
y = reorder(dataset[[column[1]]], dataset[[column[2]]]),
marker = list(color = "deepskyblue",
line = list(color = "black", width = 1))) %>%
layout(title = paste("Average", word(column[2], 2),
"MPG of Different Manufacturers"),
xaxis = list(title = paste("Miles Per Gallon driving",
word(column[2], 2))),
yaxis = list(title = "Car Manufacturer"))
}
library("dplyr")
library("stringr")
library("ggplot2")
library("lintr")
# load in filtered data set
test_df <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/test_filtered_2009_present.csv"))
# format column
test_df$Represented.Test.Vehicle.Make <- str_to_upper(
test_df$Represented.Test.Vehicle.Make)
# filter the dataset further
filter_test_df <- test_df %>%
select(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model,
Emission.Name,
Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(
Rounded.Emission.Result..g.mi., na.rm = TRUE))
# create a summary dataframe from the filtered dataset
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(),
total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE),
avg_emission = total_emissions_emitted / num)
# get the list of all car manufacturers
select_list <- summary_info %>%
pull(Represented.Test.Vehicle.Make)
# create a dataframe for the graph
graph_df <- summary_info %>%
arrange(-avg_emission) %>%
head(10)
# create the graph
emissions <- ggplot(data = graph_df) +
geom_col(mapping = aes(
x = reorder(Represented.Test.Vehicle.Make, avg_emission),
y = avg_emission)) + coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library("dplyr")
library("stringr")
library("ggplot2")
library("lintr")
# load in filtered data set
test_df <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/test_filtered_2009_present.csv"))
# format column
test_df$Represented.Test.Vehicle.Make <- str_to_upper(
test_df$Represented.Test.Vehicle.Make)
# filter the dataset further
filter_test_df <- test_df %>%
select(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model,
Emission.Name,
Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(
Rounded.Emission.Result..g.mi., na.rm = TRUE))
# create a summary dataframe from the filtered dataset
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(),
total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE),
avg_emission = total_emissions_emitted / num)
# get the list of all car manufacturers
select_list <- summary_info %>%
pull(Represented.Test.Vehicle.Make)
# create a dataframe for the graph
graph_df <- summary_info %>%
arrange(-avg_emission) %>%
head(10)
# create the graph
emissions <- ggplot(data = graph_df) +
geom_col(mapping = aes(
x = reorder(Represented.Test.Vehicle.Make, avg_emission),
y = avg_emission)) + coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
library("dplyr")
library("stringr")
library("ggplot2")
library("lintr")
# load in filtered data set
test_df <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/test_filtered_2009_present.csv"))
# format column
test_df$Represented.Test.Vehicle.Make <- str_to_upper(
test_df$Represented.Test.Vehicle.Make)
# filter the dataset further
filter_test_df <- test_df %>%
select(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model,
Emission.Name,
Rounded.Emission.Result..g.mi., ) %>%
filter(Emission.Name == "CO") %>%
group_by(Model.Year,
Represented.Test.Vehicle.Make,
Represented.Test.Vehicle.Model) %>%
summarize(Emission_Emitted = max(
Rounded.Emission.Result..g.mi., na.rm = TRUE))
# create a summary dataframe from the filtered dataset
summary_info <- filter_test_df %>%
group_by(Represented.Test.Vehicle.Make) %>%
summarize(num = n(),
total_emissions_emitted = sum(Emission_Emitted, na.rm = TRUE),
avg_emission = total_emissions_emitted / num)
# get the list of all car manufacturers
select_list <- summary_info %>%
pull(Represented.Test.Vehicle.Make)
# create a dataframe for the graph
graph_df <- summary_info %>%
arrange(-avg_emission) %>%
head(10)
# create the graph
emissions <- ggplot(data = graph_df) +
geom_col(mapping = aes(
x = reorder(Represented.Test.Vehicle.Make, avg_emission),
y = avg_emission)) + coord_flip() +
labs(
title = "Top 10 Polluting Car Manufacturers",
x = "Car Manufacturer",
y = "Average Carbon Monoxide Emitted (g/mi)"
)
emissions
library("shiny")
library("dplyr")
library("tidyr")
library("ggplot2")
# Manipulating the 'midwest' data set for the pie chart
custom_midwest <- midwest %>%
mutate(
state = replace(state, state == "IL", "Illinois"),
state = replace(state, state == "IN", "Indiana"),
state = replace(state, state == "MI", "Michigan"),
state = replace(state, state == "OH", "Ohio"),
state = replace(state, state == "WI", "Wisconsin")
) %>%
group_by(state) %>%
summarise(
popwhite = sum(popwhite),
popblack = sum(popblack),
popamerindian = sum(popamerindian),
popasian = sum(popasian),
popother = sum(popother)
) %>%
mutate(
total = popwhite + popblack + popamerindian + popasian + popother,
popwhite = popwhite * 100 / total,
popblack = popblack * 100 / total,
popamerindian = popamerindian * 100 / total,
popasian = popasian * 100 / total,
popother = popother * 100 / total
) %>%
select(state, popwhite, popblack, popamerindian, popasian, popother)
n <- custom_midwest$state
custom_df <- as.data.frame(t(custom_midwest[, -1]))
colnames(custom_df) <- n
custom_df$category <- factor(row.names(custom_df))
# Adding the different colors schemes for the pie chart
custom_df <- custom_df %>%
mutate(
Modern = c("#55DDE0", "#33658A", "#2F4858", "#F6AE2D", "#F26419"),
Blue = c("#0B132B", "#1C2541", "#3A506B", "#457B9D", "#1D3557"),
Green = c("#53DD6C", "#388659", "#2BC016", "#3BB273", "#8BBD8B"),
Grey = c("#172121", "#444554", "#E5D0CC", "#BFACB5", "#7F7B82")
)
# Manipulating the 'midwest' dataset for the scatter plot
custom_midwest_two <- midwest %>%
mutate(
state = replace(state, state == "IL", "Illinois"),
state = replace(state, state == "IN", "Indiana"),
state = replace(state, state == "MI", "Michigan"),
state = replace(state, state == "OH", "Ohio"),
state = replace(state, state == "WI", "Wisconsin")
) %>%
select(
state, area, percollege, percprof, percpovertyknown,
percbelowpoverty, percchildbelowpovert, percadultpoverty,
percelderlypoverty
) %>%
rename(
State = state,
Area = area
)
# Creating a custom data frame for displaying labels that are easier to
# understand for the user
df_labels <- data.frame(
percpovertyknown = "Percent Poverty Known",
percbelowpoverty = "Percent Below Poverty",
percchildbelowpovert = "Percent Child Below Poverty",
percadultpoverty = "Percent Adult Poverty",
percelderlypoverty = "Percent Elderly Poverty",
percollege = "Percent College Educated",
percprof = "Percent Profession"
)
# Server function
my_server <- function(input, output) {
output$pie_chart <- renderPlot({
ggplot(custom_df, aes_string(x = 1, y = input$state, fill = "category")) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(
x = NULL, y = NULL, fill = NULL,
title = "Breakup of Demographics in the Midwest"
) +
scale_fill_manual(
values = custom_df[[input$color]],
labels = c(
"White", "Black", "American Indian",
"Asian", "Other"
)
) +
theme_classic() + theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(
hjust = 0.5,
color = "#666666"
)
)
})
output$scatter_plot <- renderPlot({
ggplot(
custom_midwest_two,
aes_string(x = input$x_axis, y = input$y_axis)
) +
geom_smooth(
method = "lm", se = FALSE,
color = "black", formula = y ~ x
) +
geom_point(aes_string(color = input$group_by)) +
labs(
title = "Relationship Between Poverty and Education Levels",
x = df_labels[[input$x_axis]], y = df_labels[[input$y_axis]]
) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, color = "#666666"))
})
}
