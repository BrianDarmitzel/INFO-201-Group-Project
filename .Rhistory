output$title1 <- renderText({
paste0("List of Representatives from ", input$state)
})
output$title2 <- renderText({
paste0("Selected Representative: ", input$name)
})
# Server for Summary Plots
output$gender_plot <- renderPlotly({
graph_gender(full_to_abb(input$gender))
})
output$political_plot <- renderPlotly({
graph_party(full_to_abb(input$political))
})
}
source("propublica.r")
about_page <- tabPanel("About",
h3("Overview"),
p("This assignment has us compile a list of the Congresssional
representatives for our state in the House of Representatives,
and then allow us to select an individual representative to get
more information on them. Information included is political party,
age, Twitter account, Facebook account, gender, and Congressional
district. Phone numbers, office, and website information can be
found as well."),
p("This assignment also has a Summary Graphs information page. This
page has two tabs, one showing data about state representatives gender,
and the other shows data about state representatives political
affiliation.Each has an explanation on what this data is about
and can be adjusted for all 50 states."),
p("For ease of access, the information used to make these visualizations
can be found here:"),
p(a("Link used to find information on House legislatures",
href = "https://api.propublica.org/congress/v1/members/{chamber}/{state}/current.json")),
p(a("Link used to find information on individual members",
href = "https://api.propublica.org/congress/v1/members/{member}.json")),
br(),
h3("Affiliation"),
p("Brian Darmitzel"),
p("INFO 201A: Technical Foundations of Informatics"),
p("The Information School"),
p("University of Washington"),
p("Autumn 2019"),
br(),
h3("Reflective Statement"),
p("One of the most challenging aspects of this assignment was
determining how to retrieve the correct data to show on our
Shiny application, as well as how to present the data once it
was recieved. Through this process we learned how to use our
imagination and creativity to make the presentation of this
data clean and user-friendly. Although the user may not notice,
a large amount of work has gone into making this project
presentable and informative for the viewers, something that
may not be apparent at first glance. Through the process of
completing this assignment, I have gained a fuller understanding
of the important of front and back-end development to make an
efficient product. And these are skills I will certainly carry
with me to other professional fields and through life in general."),
)
query_page <- tabPanel("Search Representatives",
sidebarLayout(
sidebarPanel(
htmlOutput("state_selector"),
htmlOutput("rep_names")
),
mainPanel(
h3(textOutput("title1")),
tableOutput("state_reps"),
h3(textOutput("title2")),
tableOutput("rep_info")
)
)
)
graphs_page <- navbarMenu("Summary Graphs",
tabPanel("Representatives by Gender",
sidebarLayout(
sidebarPanel(
pickerInput(
choices = states,
inputId  = "gender",
label = "View Gender by State:",
choicesOpt = list(
disabled = states %in% states[c(1, 7, 14, 22, 35, 43, 51)]
)
)
),
mainPanel(
plotlyOutput("gender_plot"),
)
)
),
tabPanel("Representatives by Party",
sidebarLayout(
sidebarPanel(
pickerInput(
choices = states,
inputId  = "political",
label = "View Political Affiliation by State:",
choicesOpt = list(
disabled = states %in% states[c(1, 7, 14, 22, 35, 43, 51)]
)
)
),
mainPanel(
plotlyOutput("political_plot"),
)
)
)
)
ui <- fluidPage(
navbarPage("INFO 201 A7 - Congressional Information",
about_page,
query_page,
graphs_page
)
)
source("app_server.r")
source("app_ui.r")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source(".gitignore/propublica_key.R")
source(".gitignore/propublica_key.R")
library("shinyWidgets")
source("propublica.r")
source("propublica.r")
server <- function(input, output) {
# Server for Representative Information
output$state_selector = renderUI({
pickerInput(inputId = "state",
label = "Select a State:",
choices = states,
multiple = F,
choicesOpt = list(
disabled = states %in% states[c(1, 7, 14, 22, 35, 43, 51)]
)
)
})
output$rep_names = renderUI({
data = full_to_abb(input$state)
selectInput(inputId = "name",
label = "Select a Representative:",
choices = get_rep_names(data))
})
output$state_reps <- renderTable({
state_house("house", full_to_abb(input$state))
})
output$rep_info <- renderTable({
rep_data(input$name, full_to_abb(input$state))
})
output$title1 <- renderText({
paste0("List of Representatives from ", input$state)
})
output$title2 <- renderText({
paste0("Selected Representative: ", input$name)
})
# Server for Summary Plots
output$gender_plot <- renderPlotly({
graph_gender(full_to_abb(input$gender))
})
output$political_plot <- renderPlotly({
graph_party(full_to_abb(input$political))
})
}
runApp()
runApp()
source("app_server.r")
source("app_ui.r")
runApp()
source("propublica_key.R")
source("propublica_key.R")
source("propublica_key.R")
source(".gitignore/propublica_key.R")
source(".gitignore/propublica_key.R")
setwd("a7--BrianDarmitzel")
setwd("a7--BrianDarmitzel")
setwd("a7--BrianDarmitzel")
setwd("a7--BrianDarmitzel")
getwd()
setwd()
setwd(".gitignore/")
setwd("~/GitHub Assignments/a7--BrianDarmitzel")
setwd(".gitignore/")
source("propublica_key.R")
# Data frame of all members of the house in a state
state_house <- function(chamber, state) {
url <- paste("https://api.propublica.org/congress/v1/members/",
chamber, "/", state, "/current.json", sep = "")
fromJSON(content(GET(url, add_headers("X-API-Key" = api_key)),
as = "text", encoding = "UTF-8"), flatten = TRUE) %>%
data.frame() %>%
select("results.id", "results.name", "results.party",
"results.twitter_id", "results.facebook_account",
"results.district", "results.gender") %>%
rename("Rep ID" = results.id,
"Rep Name" = results.name,
"Party" = results.party,
"Twitter ID" = results.twitter_id,
"Facebook Account" = results.facebook_account,
"District" = results.district,
"Gender" = results.gender)
}
runApp('~/GitHub Assignments/a7--BrianDarmitzel')
source("app_server.r")
setwd("~/GitHub Assignments/a7--BrianDarmitzel")
source(".gitignore/propublica_key.R")
source("app_server.r")
source("app_ui.r")
shinyApp(ui = ui, server = server)
setwd("~/INFO-201-Group-Project")
# Launch the app
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("my_ui.R")
source("my_server.R")
runApp()
View(vehicles_data)
View(vehicles_data)
# filtered data set
vehicles_data <- read.csv(
unz("data/filtered_datasets.zip",
"filtered_datasets/vehicles_filtered.csv"), stringsAsFactors = F)
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n())
View(model_mpg)
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n(),
`Combined MPG` = sum(Combined.MPG.for.main.fuel) / n())
View(model_mpg)
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n(),
`Combined MPG` = sum(Combined.MPG.for.main.fuel) / n())
View(model_mpg)
runApp()
fuel_data <- vehicles_data %>%
group_by(make) %>%
summarise(`Annual gas Consumption in Barrels` = sum(Annual.petroleum.consumption.in.barrels.for.main.fuel) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.CO2.in.grams.mile.for.main.fuel..2.) / n(),
`Annual Fuel Cost` = sum(Annual.fuel.cost.for.main.fuel) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.savings.for.gas.over.5.years.comapred.to.average.car) / n())
View(fuel_data)
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make, `Average city MPG`) %>%
top_n(20)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make, `Average highway MPG`) %>%
top_n(20)
highway_mpg <- model_mpg %>%
arrange(desc(`Combined MPG`)) %>%
select(make, `Combined MPG`) %>%
top_n(20)
combined_mpg <- model_mpg %>%
arrange(desc(`Combined MPG`)) %>%
select(make, `Combined MPG`) %>%
top_n(20)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make, `Average highway MPG`) %>%
top_n(20)
# Single data frame with combined MPG
combined_mpg <- model_mpg %>%
arrange(desc(`Combined MPG`)) %>%
select(make, `Combined MPG`) %>%
top_n(20)
View(combined_mpg)
# Create a function to create interactive
# graph of City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
plot_ly(
type = "bar",
x = round(dataset[[column[2]]], 1),
y = reorder(dataset[[column[1]]], dataset[[column[2]]]),
marker = list(color = "deepskyblue",
line = list(color = "black", width = 1))) %>%
layout(title = paste("Average", word(column[2], 2),
"MPG of Different Manufacturers"),
xaxis = list(title = paste("Miles Per Gallon driving",
word(column[2], 2))),
yaxis = list(title = "Car Manufacturer"))
}
plot_mpg(city_mpg)
plot_mpg(highway_mpg)
plot_mpg(combined_mpg)
plot_mpg(combined_mpg)
View(fuel_data)
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
fuel_mpg_data <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n(),
`Combined MPG` = sum(Combined.MPG.for.main.fuel) / n(),
`Annual gas Consumption in Barrels` = sum(Annual.petroleum.consumption.in.barrels.for.main.fuel) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.CO2.in.grams.mile.for.main.fuel..2.) / n(),
`Annual Fuel Cost` = sum(Annual.fuel.cost.for.main.fuel) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.savings.for.gas.over.5.years.comapred.to.average.car) / n())
View(fuel_mpg_data)
write.csv(fuel_mpg_data, "fuel_mpg_data.csv")
View(vehicles_data)
indiv_mod <- vehicles_data %>%
group_by(make,model) %>%
summarise(Number = n())
View(indiv_mod)
sum(indiv_mod$Number)
avg(indiv_mod$Number)
mean(indiv_mod$Number)
indiv_mod <- vehicles_data %>%
group_by(make,model) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n(),
`Combined MPG` = sum(Combined.MPG.for.main.fuel) / n(),
`Annual gas Consumption in Barrels` = sum(Annual.petroleum.consumption.in.barrels.for.main.fuel) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.CO2.in.grams.mile.for.main.fuel..2.) / n(),
`Annual Fuel Cost` = sum(Annual.fuel.cost.for.main.fuel) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.savings.for.gas.over.5.years.comapred.to.average.car) / n())
View(indiv_mod)
write.csv(indiv_mod, "vehicles_individual_data.csv")
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
fuel_mpg_data <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n(),
`Combined MPG` = sum(Combined.MPG.for.main.fuel) / n())
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n(),
`Combined MPG` = sum(Combined.MPG.for.main.fuel) / n())
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make, `Average city MPG`) %>%
top_n(20)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make, `Average highway MPG`) %>%
top_n(20)
# Single data frame with combined MPG
combined_mpg <- model_mpg %>%
arrange(desc(`Combined MPG`)) %>%
select(make, `Combined MPG`) %>%
top_n(20)
# Create a function to create interactive
# graph of City MPG and Highway MPG
plot_mpg <- function(dataset, variable) {
column <- colnames(dataset)
plot_ly(
type = "bar",
x = round(dataset[[column[2]]], 1),
y = reorder(dataset[[column[1]]], dataset[[column[2]]]),
marker = list(color = "deepskyblue",
line = list(color = "black", width = 1))) %>%
layout(title = paste("Average", word(column[2], 2),
"MPG of Different Manufacturers"),
xaxis = list(title = paste("Miles Per Gallon driving",
word(column[2], 2))),
yaxis = list(title = "Car Manufacturer"))
}
plot_mpg(city_mpg)
plot_mpg(highway_mpg)
# Group data by car manufacturer and calculate average
# MPG for their cars on highway and city
model_mpg <- vehicles_data %>%
group_by(make) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n(),
`Combined MPG` = sum(Combined.MPG.for.main.fuel) / n())
# single data frame with only city MPG
city_mpg <- model_mpg %>%
arrange(desc(`Average city MPG`)) %>%
select(make, `Average city MPG`) %>%
top_n(20)
# Single data frame with only highway MPG
highway_mpg <- model_mpg %>%
arrange(desc(`Average highway MPG`)) %>%
select(make, `Average highway MPG`) %>%
top_n(20)
# Single data frame with combined MPG
combined_mpg <- model_mpg %>%
arrange(desc(`Combined MPG`)) %>%
select(make, `Combined MPG`) %>%
top_n(20)
indiv_mod <- vehicles_data %>%
group_by(make,model) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n(),
`Combined MPG` = sum(Combined.MPG.for.main.fuel) / n(),
`Annual gas Consumption in Barrels` = sum(Annual.petroleum.consumption.in.barrels.for.main.fuel) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.CO2.in.grams.mile.for.main.fuel..2.) / n(),
`Annual Fuel Cost` = sum(Annual.fuel.cost.for.main.fuel) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.savings.for.gas.over.5.years.comapred.to.average.car) / n())
View(indiv_mod)
runApp()
runApp()
# Average number of test for all cars
mean(indiv_mod$Number)
# Average number of test for all cars
mean(indiv_mod$Number)
indiv_mod <- vehicles_data %>%
group_by(make,model) %>%
summarise(`Number of Models in Data` = n(),
`Average city MPG` = sum(City.MGP.for.main.fuel) / n(),
`Average highway MPG` = sum(Highway.MPG.for.main.fuel) / n(),
`Combined MPG` = sum(Combined.MPG.for.main.fuel) / n(),
`Annual gas Consumption in Barrels` = sum(Annual.petroleum.consumption.in.barrels.for.main.fuel) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.CO2.in.grams.mile.for.main.fuel..2.) / n(),
`Annual Fuel Cost` = sum(Annual.fuel.cost.for.main.fuel) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.savings.for.gas.over.5.years.comapred.to.average.car) / n())
# Average number of test for all cars
mean(indiv_mod$`Number of Models in Data`)
# Average City MPG for all Cars
mean(indiv_mod$`Average city MPG`)
# Average Highway MPG for all Cars
mean(indiv_mod$`Average highway MPG`)
# Average Combined MPG for all Cars
mean(indiv_mod$`Combined MPG`)
# Average Gas Consumption of all Cars
mean(indiv_mod$`Annual gas Consumption in Barrels`)
# Average Tailpipe Emissions in grams/mile for all Cars
mean(indiv_mod$`Tailpipe Emissions in g/mi`)
# Average annual Fuel Cost for all Cars
mean(indiv_mod$`Annual Fuel Cost`)
# Average Cost Savings for Gas over 5 Years
mean(indiv_mod$`Annual Fuel Cost`)
# Average Cost Savings for Gas over 5 Years
mean(indiv_mod$`Cost Savings for Gas over 5 Years`)
# Average number of test for all cars
average(`Number of Models in Data`)
average <- function(feature) {
mean(indiv_mod$feature)
}
# Average number of test for all cars
average(`Number of Models in Data`)
average <- function(feature) {
mean(indiv_mod[[feature]])
}
# Average number of test for all cars
average(`Number of Models in Data`)
# Average number of test for all cars
average("Number of Models in Data")
# Average annual Fuel Cost for all Cars in USD
average("Annual Fuel Cost")
# Average number of test for all cars
average("Number of Models in Data")
# Average City MPG for all Cars
average("Average city MPG")
# Average Highway MPG for all Cars
average("Average highway MPG")
# Average Combined MPG for all Cars
average("Combined MPG")
# Average Gas Consumption of all Cars
average("Annual gas Consumption in Barrels")
# Average Tailpipe Emissions in grams/mile for all Cars
average("Tailpipe Emissions in g/mi")
# Average annual Fuel Cost for all Cars in USD
average("Annual Fuel Cost")
# Average Cost Savings for Gas over 5 Years
average("Cost Savings for Gas over 5 Years")
graph_gender <- function(state) {
color_map <- c("Female" = "deeppink", "Male" = "deepskyblue")
data <- state_house("house", state) %>%
group_by(Gender) %>%
summarize(Num = n())
data$Gender[data$Gender == "F"] <- "Female"
data$Gender[data$Gender == "M"] <- "Male"
plot_ly(
type = "bar",
x = data$Gender,
y = data$Num,
orientation = "h",
marker = list(color = color_map[data$Gender],
line = list(color = "black", width = 1))) %>%
layout(title = paste("Gender of House Representatives in",
abb_to_full(state)),
xaxis = list(title = "Gender of Representatives"),
yaxis = list(title = "Count"))
}
