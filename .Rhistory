print(x)
i <- i + 1
}
}
View(color_map)
for (m in colnames(data)) {
#print(data[[x]])
if(data[[m]] < 0) {
color_map[i] <- c(m = "darkblue")
#print(m)
i <- i + 1
}
}
View(color_map)
color_map <- c("Democrat" = "darkblue")
i <- 1
for (m in colnames(data)) {
#print(data[[x]])
if(data[[m]] < 0) {
color_map[i] <- c(m = "darkblue")
#print(m)
i <- i + 1
}
}
View(color_map)
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
print(x)
}
}
color_map <- c(c("Democrat", "d", "R") = "darkblue")
color_map <- c(c("Democrat", "d", "R") = "darkblue")
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
color_map <- c(c("Democrat", "d", "R") = "darkblue")
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
print(x)
}
}
View(color_map)
color_map <- c(c("Democrat", "d", "R") = "darkblue")
color_map <- c("Democrat" = "darkblue")
View(color_map)
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map <- c("Democrat" = "darkblue")
print(x)
}
}
View(color_map)
color_map <- c("Democrat" = "darkblue")
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map <- c("Demat" = "darkblue")
print(x)
}
}
View(color_map)
color_map <- c("Democrat" = "darkblue")
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[1] <- c("Demat" = "darkblue")
print(x)
}
}
View(color_map)
color_map <- c("Democrat" = "darkblue")
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[2] <- c("Demat" = "darkblue")
print(x)
}
}
View(color_map)
View(color_map)
color_map <- c("Democrat" = "darkblue")
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[2] <- c("Demat" = "blue")
print(x)
}
}
View(color_map)
color_map <- c("Democrat" = "darkblue")
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[2] <- c("Test" = "blue")
print(x)
}
}
View(color_map)
color_map <- c("Democrat" = "darkblue")
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[x] <- c("Test" = "blue")
print(x)
}
}
View(color_map)
color_map <- c()
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[x] <- c("Test" = "blue")
print(x)
}
}
View(color_map)
color_map <- c()
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[x] <- c("Data" = "blue")
print(x)
}
}
View(color_map)
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[x] <- c("Data" = "blue")
} else {
color_map[x] <- c("Data" = "red")
}
}
View(color_map)
View(color_map)
graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == car_model)
data <- data[3:10] - averages
color_map <- c()
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[x] <- c("Data" = "blue")
} else {
color_map[x] <- c("Data" = "red")
}
}
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = num,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[num]),
name = 'expenses'
)
}
graph_ranking("ILX")
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
color_map <- c()
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[x] <- c("Data" = "blue")
} else {
color_map[x] <- c("Data" = "red")
}
}
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
color_map <- c()
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[x] <- c("Data" = "blue")
} else {
color_map[x] <- c("Data" = "red")
}
}
View(color_map)
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
color_map <- c()
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[x] <- c("Data" = "blue")
} else {
color_map[x] <- c("Data" = "red")
}
}
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = num,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[num]),
name = 'expenses'
)
View(color_map)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = num,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[num]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = num,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[colnames(data)[3:10]]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = num,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[colnames(data)[3:10]]),
name = 'expenses'
)
View(color_map)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = num,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[x]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = num,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
columns <- colnames(data[3:10])
columns <- colnames(data)[3:10]
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
# load in filtered data set
emissions_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/emissions_data.csv"))
fuel_economy_data <- read.csv(unz("data/filtered_datasets.zip",
"filtered_datasets/vehicles_individual_data.csv"))
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
all_brands <- merge(x=brands1,y=brands2,by="Vehicle Manufacturer")
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
all_brands <- merge(x=brands1,y=brands2,by="Vehicle Manufacturer")
brands1 <- emissions_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(average_emission_emitted = sum(Emission_Emitted)/n())
brands2 <- fuel_economy_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(`Average city MPG` = sum(Average.city.MPG) / n(),
`Average highway MPG` = sum(Average.highway.MPG) / n(),
`Combined MPG` = sum(Combined.MPG) / n(),
`Annual gas Consumption in Barrels` = sum(Annual.gas.Consumption.in.Barrels) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.Emissions.in.g.mi) / n(),
`Annual Fuel Cost` = sum(Annual.Fuel.Cost) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.Savings.for.Gas.over.5.Years) / n())
all_brands <- merge(x=brands1,y=brands2,by="Vehicle Manufacturer")
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
fuel_economy_data
# convert values to upper case
fuel_economy_data$make <- str_to_upper(
fuel_economy_data$make)
fuel_economy_data$model <- str_to_upper(
fuel_economy_data$model)
emissions_data$Represented.Test.Vehicle.Model <- str_to_upper(
emissions_data$Represented.Test.Vehicle.Model)
# rename a few columns
emissions_data <- rename(emissions_data, 'Vehicle Manufacturer' = Represented.Test.Vehicle.Make)
fuel_economy_data <- rename(fuel_economy_data, 'Vehicle Manufacturer' = make)
emissions_data <- rename(emissions_data, 'Vehicle Model' = Represented.Test.Vehicle.Model)
fuel_economy_data <- rename(fuel_economy_data, 'Vehicle Model' = model)
brands1 <- emissions_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(average_emission_emitted = sum(Emission_Emitted)/n())
brands2 <- fuel_economy_data %>%
group_by(`Vehicle Manufacturer`) %>%
summarize(`Average city MPG` = sum(Average.city.MPG) / n(),
`Average highway MPG` = sum(Average.highway.MPG) / n(),
`Combined MPG` = sum(Combined.MPG) / n(),
`Annual gas Consumption in Barrels` = sum(Annual.gas.Consumption.in.Barrels) / n(),
`Tailpipe Emissions in g/mi` = sum(Tailpipe.Emissions.in.g.mi) / n(),
`Annual Fuel Cost` = sum(Annual.Fuel.Cost) / n(),
`Cost Savings for Gas over 5 Years` = sum(Cost.Savings.for.Gas.over.5.Years) / n())
all_brands <- merge(x=brands1,y=brands2,by="Vehicle Manufacturer")
all_cars <- merge(x=emissions_data, y=fuel_economy_data, by=c("Vehicle Manufacturer", "Vehicle Model")) %>%
select(-Number.of.Models.in.Data)
mean(all_cars[["Average.city.MPG"]])
averages <- as.vector(lapply(all_cars[3:10], mean), mode = "numeric")
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
columns <- colnames(data)[3:10]
color_map <- c()
for (x in colnames(data)) {
#print(data[[x]])
if(data[[x]] < 0) {
color_map[x] <- c("Data" = "blue")
} else {
color_map[x] <- c("Data" = "red")
}
}
View(color_map)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = num,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = data,
text = round(num, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = data,
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, type = "numeric"),
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, "numeric"),
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[data]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, "numeric"),
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[as.vector(data, "numeric")]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[columns]),
name = 'expenses'
)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
text = round(data, 1),
textposition = "auto",
marker = list(color = color_map[columns])
)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
text = round(as.vector(data, "numeric"), 1),
textposition = "auto",
marker = list(color = color_map[columns])
)
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
columns <- colnames(data)[3:10]
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
text = round(as.vector(data, "numeric"), 1),
textposition = "auto",
marker = list(color = color_map[columns])
)
View(data)
data <- data[3:10] - averages
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
View(data)
columns <- colnames(data)[3:10]
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
text = round(as.vector(data, "numeric"), 1),
textposition = "auto",
marker = list(color = color_map[columns])
)
plot_ly() %>%
add_bars(
x = columns,
y = data,
marker = list(color = color_map[columns])
)
plot_ly() %>%
add_bars(
x = columns,
y = data,
textposition = "auto",
marker = list(color = color_map[columns])
)
plot_ly() %>%
add_bars(
x = columns,
y = data,
text = round(as.vector(data, "numeric"), 1),
textposition = "auto",
marker = list(color = color_map[columns])
)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, "numeric"),
marker = list(color = color_map[columns])
)
View(data)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, mode = "numeric"),
marker = list(color = color_map[columns])
)
View(data)
plot_ly() %>%
add_bars(
x = columns,
y = as.vector(data, mode = "numeric")
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, mode = "numeric"),
marker = list(color = color_map[colnames(data)[3:10]])
)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, mode = "numeric"),
marker = list(color = "red")
)
#graph_ranking <- function(car_model) {
data <- all_cars %>%
filter(`Vehicle Model` == "ILX")
data <- data[3:10] - averages
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, mode = "numeric"),
marker = list(color = "red")
)
View(data)
plot_ly() %>%
add_bars(
x = colnames(data)[3:10],
y = as.vector(data, mode = "numeric"),
marker = list(color = color_map[colnames(data)[3:10]])
)
